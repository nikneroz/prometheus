version: '3.9'

services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - 9090:9090
    depends_on:
      - cadvisor
#      - pushgateway
    networks:
      - traefik_public
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure

  node-exporter:
    image: flaviostutz/docker-swarm-node-exporter
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    ports:
      - 9100:9100
    networks:
      - traefik_public
    deploy:
      mode: global
      restart_policy:
          condition: on-failure

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - "./alertmanager/:/etc/alertmanager/"
    networks:
      - traefik_public
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    deploy:
      placement:
        constraints:
           - node.role==manager
      restart_policy:
        condition: on-failure    

  nvidia-smi:
    image: e7db/prometheus-nvidiasmi
    privileged: true
    ports:
      - 9202:9202
    networks:
      - traefik_public
    deploy:
      mode: global
      restart_policy:
        condition: on-failure    

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    # ports:
    #   - 8080:8080
    networks:
      - traefik_public
    deploy:
      mode: global
      restart_policy:
          condition: on-failure

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    # ports:
    #   - 3000:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - traefik_public
    user: "472"
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.labels.grafana.grafana-data == true
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik_public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.grafana-http.rule=Host(`grafana.selectel.node3`)
        - traefik.http.routers.grafana-http.entrypoints=http
        # - traefik.http.routers.grafana-http.middlewares=https-redirect
        # - traefik.http.routers.grafana-https.rule=Host(`${DOMAIN?Variable not set}`)
        # - traefik.http.routers.grafana-https.entrypoints=https
        # - traefik.http.routers.grafana-https.tls=true
        # - traefik.http.routers.grafana-https.tls.certresolver=le
        - traefik.http.services.grafana.loadbalancer.server.port=3000

volumes:
  prometheus-data:
    external: true
  grafana-data:
    external: true

networks:
  traefik_public:
    external: true

#  pushgateway:
#    image: prom/pushgateway
#    deploy:
#      mode: global
#      restart_policy:
#        condition: on-failure
#    ports:
#      - 9091:9091
#    networks:
#      - traefik_public
